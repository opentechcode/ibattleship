//
//  Ship.m
//  iBattleShips
//
//  Created by Ali Zafar on 9/30/10.
//  Copyright 2010 __MyCompanyName__. All rights reserved.
//

#import "Ship.h"


@implementation Ship
@synthesize shipSprite,cellsCoverArray,deployedPosition,originalPosition,cellsDictionary,shipCurrentOrientation,xAdjustment,yAdjustment,isDeployed;
@synthesize shipType,shouldbeRemoved;
- (id) init
{
	self = [super init];
	if (self != nil) {
		
		
		NSMutableArray *tempArray= [[NSMutableArray alloc] init];
		
		self.cellsCoverArray=tempArray;
		
		[tempArray release];
		
		shipLifeState=CONST_SHIP_LIFE_ALIVE;
		
	}
	
	
	return self;
}


-(Ship *)initWithShipType:(NSString *)shiptype andOrientation:(NSString *)currentShipOrientation
{
	self=[super init];
	
	if (self != nil) 
	{
		NSString *spriteFullName=@"";
		NSMutableArray *tempArray= [[NSMutableArray alloc] init];
		
		self.cellsCoverArray=tempArray;
		
		[tempArray release];
		NSString *path=	[[NSBundle mainBundle] pathForResource:@"Ships" ofType:@"plist"];
		NSDictionary *dict=	[NSDictionary dictionaryWithContentsOfFile:path];
		NSDictionary *tempDict=[[NSDictionary alloc] initWithDictionary:dict];// [dict objectForKey:shipType];
		self.cellsDictionary=tempDict;
		[tempDict release];
		
		if ([currentShipOrientation isEqualToString:CONST_SHIP_ORIENTATION_VERTICAL_UP] || [currentShipOrientation isEqualToString:CONST_SHIP_ORIENTATION_VERTICAL_Down]) 
		{
			spriteFullName = [shiptype stringByAppendingString:@"_Vertical.png"];
			[self setShipCurrentOrientation:CONST_SHIP_ORIENTATION_VERTICAL_UP] ;
			
		}
		else if ([currentShipOrientation isEqualToString:CONST_SHIP_ORIENTATION_HORIZONTAL_Right] || [currentShipOrientation isEqualToString:CONST_SHIP_ORIENTATION_HORIZONTAL_LEFT]) 

		{
			spriteFullName = [shiptype stringByAppendingString:@"_Horizontal.png"];
			[self setShipCurrentOrientation:CONST_SHIP_ORIENTATION_HORIZONTAL_Right] ;


		}
		self.shipSprite = [CCSprite spriteWithFile:spriteFullName];
		self.shipCurrentOrientation=[NSString stringWithFormat:currentShipOrientation];
		self.shipType = [NSString stringWithFormat:shiptype];
		
		
		shipLifeState=CONST_SHIP_LIFE_ALIVE;
		
		self.isDeployed = NO;
		self.shouldbeRemoved = YES;


		
	}
	
	return self;
}

-(void)undeployShip;
{
	for (int i=0 ; i<[cellsCoverArray count] ; i++) {
		
		Cell *cell =	[cellsCoverArray objectAtIndex:i];	
		cell.cellOccupationState=CONST_CELL_OCCUPATION_STATE_EMPTY;
		
		
	}
	
	
	
}

-(void)getShipDeploymentDetails
{
	NSLog(@"Start Ship deployment details---------");
	NSLog(@"Ship Name:%@",self.shipType);
	NSString *str=[NSString stringWithFormat:@""];
	for (int i=0; i<[cellsCoverArray count]; i++) {
		
		str=[str stringByAppendingFormat:@"%d,",[(Cell*)[cellsCoverArray objectAtIndex:i] cellNumber]];
		
	}
	NSLog(@"Cell:%@",str);
	NSLog(@"End Ship deployment details---------");
}




-(NSDictionary *)getOccupiedCellsDirections
{
    return  (NSDictionary *)[[cellsDictionary objectForKey:self.shipType] objectForKey:self.shipCurrentOrientation];
	
}

-(BOOL)isShipDestroyed
{
	if (shipLifeState==CONST_SHIP_LIFE_DEAD ) {
		return YES;
	}
	if ([cellsCoverArray count]==0) {
		return NO;
	}
	
	for (int i=0; i<[cellsCoverArray count]; i++) {
		
		Cell *cell=[cellsCoverArray objectAtIndex:i];
		
		if(cell.cellHitState!=CONST_CELL_HIT_STATUS_BLAST)
		{
			return NO;
		}
		
	}
	
	return YES;
	
}

-(BOOL)isPartiallyDemaged
{
	if (shipLifeState==CONST_SHIP_LIFE_DEAD ) {
		return NO;
	}
	if ([cellsCoverArray count]==0) {
		return NO;
	}
	int cellBlast=0;
	for (int i=0; i<[cellsCoverArray count]; i++) {
		
		Cell *cell=[cellsCoverArray objectAtIndex:i];
		
		if(cell.cellHitState!=CONST_CELL_HIT_STATUS_BLAST)
		{
			cellBlast++;
		}
		
	}
	
	if (cellBlast>0 && cellBlast<[cellsCoverArray count]) {
		return YES;
	}
	return NO;
}
-(BOOL)amITouchedatPoint:(CGPoint)point
{
	//	float artScale=CONST_IMAGES_ART_SCALE;
	CGRect rect=CGRectMake( self.shipSprite.position.x-(self.shipSprite.textureRect.size.width/2), self.shipSprite.position.y-(self.shipSprite.textureRect.size.height/2), self.shipSprite.textureRect.size.width, self.shipSprite.textureRect.size.height);
	
	if (CGRectContainsPoint(rect, point)) 
	{
		
		return YES;
		
		
	}
	
	return NO;
	
	
	
	
}


- (void) dealloc
{
	
	
	[cellsCoverArray release];
	[cellsDictionary release];
	[super dealloc];
}


@end
